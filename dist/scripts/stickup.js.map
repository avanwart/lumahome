{"version":3,"sources":["../bower_components/stickUp2/build/js/stickUp.js"],"names":["$","window","document","StickUp","elem","opts","left","lastScrollTop","scroll","scrollDir","scrollDistance","active","bottom","hold","disabled","landscape","portrait","stickyHeight","outerHeight","currentOuterHeight","viewportHeight","scrollBottom","elementOffset","elementOffsetBottom","$element","topMargin","offset","$placeholder","$parent","stickpoints","top","custom","options","scrollHide","lazyHeight","keepInWrapper","wrapperSelector","zIndex","syncPosition","namespaceClass","fixedClass","disableOn","getTopMargin","parseInt","css","isNaN","search","replace","unStick","remove","removeClass","maxWidth","marginTop","marginLeft","marginRight","position","right","width","syncMargins","holdIt","forceBottom","before","offsetParent","topOffset","stickIt","addClass","topDistance","stickAtBottom","bottomDistance","syncWidth","outerWidth","margin-left","margin-right","stickUpScrollHandlerFn","event","is","target","scrollTop","Math","abs","topValue","newTopValue","stickUpResponsiveHandlerFn","initialize","extend","closest","length","parent","on","call","this","fn","stickUp","each","jQuery"],"mappings":"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","file":"stickup.js","sourcesContent":["(function ($, window, document) {\n    var StickUp = function(elem, opts) {\n        var lastScrollTop = 0,\n        scroll = 0,\n        scrollDir = '',\n        scrollDistance = 0,\n        active = false,\n        bottom = false,\n        hold = false,\n        disabled = false,\n        landscape = false,\n        portrait = false,\n        stickyHeight = 0,\n        outerHeight = 0,\n\t\tcurrentOuterHeight = 0,\n        viewportHeight = 0,\n        scrollBottom = 0,\n        elementOffset = 0,\n        elementOffsetBottom = 0,\n        $element = $(),\n        topMargin = 0,\n        offset = 0,\n        $placeholder = $('<div style=\"margin-top:0;margin-bottom:0; padding:0\"></div>'),\n        $parent = $(),\n        stickpoints = {\n            top:0,\n            bottom:0,\n            custom:[]\n        },\n        left,\n        \n        //defaults\n        options = {\n            scrollHide: false,\n            lazyHeight: 0,\n            topMargin: \"auto\",\n            keepInWrapper: false,\n            wrapperSelector: '',\n            zIndex: 99,\n            syncPosition:false,\n\t\t\tnamespaceClass: \"stuckElement\",\n\t\t\tfixedClass: \"isStuck\",\n            disableOn:function(){\n                return true;\n            }\n        },\n                \n        getTopMargin = function () {\n            if (options.topMargin === 'auto') {\n                return parseInt($element.css('marginTop'));\n            } else {\n                if (isNaN(options.topMargin) && options.topMargin.search(\"px\") > 0) {\n                    return parseInt(options.topMargin.replace(\"px\", \"\"));\n                } else if (!isNaN(parseInt(options.topMargin))) {\n                    return parseInt(options.topMargin);\n                } else {\n                    void 0;\n                    return 0;\n                }\n            }\n        },\n                \n        unStick = function(){\n            void 0;\n            $placeholder.remove();\n            $element.removeClass(options.fixedClass)\n            .css({ \n                maxWidth:\"\",\n                marginTop: \"\", \n                marginLeft:\"\",\n                marginRight:\"\",\n                position: \"\",\n                top: \"\",\n                left: \"\", \n                right: \"\",\n                bottom:\"\",\n                width: \"\"\n            });\n            active = false;\n            bottom = false;\n            hold = false;\n            if(options.syncPosition)\n                syncMargins();\n        },\n                \n        holdIt = function(forceBottom){\n            void 0;\n            $element.before($placeholder.css('height', outerHeight));\n            var offsetParent = $placeholder.offsetParent();\n            \n            if (forceBottom){\n                $element.css({\n                    position: \"absolute\"\n                });\n                var topOffset = \n                    ($parent.offset().top + $parent.outerHeight()) //bottom of container\n                    - offsetParent.offset().top - currentOuterHeight //parent-position - elementHeight\n                    - parseInt($parent.css(\"paddingBottom\"));\n            }\n            void 0;\n            void 0;\n            $element.css({\n                position: \"absolute\",\n                marginTop: topMargin,\n                bottom:\"\",\n                left:$placeholder.position().left,\n                top: forceBottom? topOffset : $element.offset().top - offsetParent.offset().top - topMargin\n            });\n        },\n        stickIt = function(){\n            void 0;\n            active = true;\n            $element.before($placeholder.css('height', outerHeight));\n            $element.addClass(options.fixedClass);\n            var topDistance = -offset;\n\n            $element.css({\n                //maxWidth: parseInt($element.outerWidth()),\n                marginTop: topMargin,\n                position: \"fixed\",\n                top: topDistance + 'px',\n                left:\"\",\n                right:\"\",\n                //right: \"auto\",\n                bottom:\"\"\n            });\n        },\n        stickAtBottom = function(){\n            void 0;\n            $element.before($placeholder.css('height', outerHeight));\n            $element.addClass(options.fixedClass);\n            var bottomDistance = -offset;//-offset;\n\n            $element.css({\n                //maxWidth: parseInt($element.outerWidth()),\n                marginTop: topMargin,\n                position: \"fixed\",\n                top: \"\",\n                left:\"\",\n                right:\"\",\n                //right: \"auto\",\n                bottom:bottomDistance\n            });\n        },\n        syncWidth = function(){\n            if($placeholder.width()!==$element.outerWidth())\n                $element.outerWidth($placeholder.outerWidth());\n        },\n        syncPosition = function(){\n            //retrieve margin\n            left = $placeholder.offset().left;\n            if(left !== $element.offset().left);\n                $element.offset({'left':left});\n        },\n        syncMargins = function(){\n            //retrieve margin\n            $placeholder.css({\n                'margin-left':$element.css('margin-left'),\n                'margin-right':$element.css('margin-left')\n            });\n            $element.css({\n                 \"margin-left\" :$placeholder.css('margin-left'),\n                 \"margin-right\" :$placeholder.css('margin-right')\n            });\n        },\n\n        stickUpScrollHandlerFn = function (event) {\n            if(!options.disableOn()){\n                if(!disabled){\n                    void 0;\n                    unStick();\n                    disabled = true;\n                }\n                return;\n            }else if(disabled){\n                disabled = false;\n            }\n            if(options.keepInWrapper && !$parent.is(':visible')) {\n                return;\n            }\n            scroll = $(event.target).scrollTop();\n            scrollDir = (scroll >= lastScrollTop) ? 'down' : 'up';\n            scrollDistance = Math.abs(lastScrollTop - scroll);\n            viewportHeight = $(window).outerHeight();\n            scrollBottom = scroll+viewportHeight;\n            lastScrollTop = scroll;\n            elementOffset = $element.offset().top;\n            stickyHeight = parseInt($element.outerHeight()+topMargin)+parseInt($element.css('marginBottom'));\n\t\t\tif (!active && !hold && !bottom) {\n                outerHeight = parseInt($element.outerHeight(true));\n                if(!bottom && !hold)\n                    stickpoints.top = parseInt($element.offset().top);\n                else\n                stickpoints.top = parseInt($placeholder.offset().top);\n                left = parseInt($element.offset().left)+5;\n            }\n\t\t\tcurrentOuterHeight = parseInt($element.outerHeight())+parseInt($element.css('margin-bottom'))+topMargin;\n            if(options.keepInWrapper)\n                stickpoints.bottom = $parent.offset().top+$parent.outerHeight()-parseInt($parent.css('paddingBottom'));\n            else\n                stickpoints.bottom = $(document).outerHeight();\n            elementOffsetBottom = $element.offset().top+currentOuterHeight;\n            \n            if(stickyHeight>viewportHeight){\n                portrait = true;\n                if(landscape){\n                    offset = 0;\n                    if(hold)\n                        holdIt();\n                    landscape = false;\n                }\n                if( hold && scrollDir === 'up' && scroll <= elementOffset - topMargin){\n                    void 0;\n                    stickIt();\n                    active = true;\n                    bottom = false;\n                    hold = false;\n                }\n                if( !active && !bottom\n                && (!options.keepInWrapper || options.keepInWrapper && scrollBottom <= stickpoints.bottom)\n                && scrollBottom >= elementOffsetBottom - topMargin\n                ){\n                    void 0;\n                    stickAtBottom();\n                    bottom = true;\n                    active = true;\n                    hold = false;\n                }\n                if(!hold && active && bottom && scrollDir === 'up' \n                || !hold && active && !bottom && scrollDir === 'down' \n                && elementOffsetBottom >= scrollBottom){\n                    void 0;\n                    holdIt();\n                    active = false;\n                    bottom = false;\n                    hold = true;\n                }\n                //FORCE BOTTOM\n                if(scrollBottom >= stickpoints.bottom && options.keepInWrapper //scroll past stickpoint while keepInWrapper\n                && (!bottom && !hold //not applied yet\n                || parseInt(elementOffsetBottom-topMargin) !== parseInt(stickpoints.bottom))){ // or element past stickpoint\n                    void 0;\n                    holdIt(true);\n                    active = false;\n                    bottom = true;\n                    hold = true;\n                }\n            }else{\n                landscape = true;\n                if(portrait){\n                    if(hold)\n                        holdIt();\n                    portrait = false;\n                }\n                // Google like reappearance on upward scroll\n                if (options.scrollHide)\n                    offset = stickyHeight + options.lazyHeight; //negative offset for initial hiding\n                else\n                    offset = options.lazyHeight;\n                \n                if(!active && !bottom && scroll >= stickpoints.top - topMargin + offset \n                || bottom && hold && scroll <= elementOffset - topMargin + offset){\n                    void 0;\n                    stickIt();\n                    active = true;\n                    bottom = false;\n                    hold = false;\n                }\n                //FORCE BOTTOM\n                if(options.keepInWrapper\n                && parseInt(elementOffsetBottom - topMargin) !== parseInt(stickpoints.bottom)\n                && scroll >= stickpoints.bottom - currentOuterHeight + offset){\n                    void 0;\n                    holdIt(true);\n                    active = false;\n                    bottom = true;\n                    hold = true;\n                }\n                //Calculate lazyHeight and autoHide\n                if (active) {\n                    var topValue = parseInt($element.css('top'));\n                    if (scrollDir === 'up' && topValue !== 0) {\n                        var newTopValue = scrollDistance > -topValue ? 0 : topValue + scrollDistance;\n                        $element.css('top', newTopValue + 'px');\n                    } else if (scrollDir === \"down\" && topValue > -offset) {\n                        var newTopValue = scrollDistance > offset + topValue ? -offset : topValue - scrollDistance;\n                        $element.css('top', newTopValue + 'px');\n                    }\n                }\n            }\n            //UNSTICK\n            if ((active || hold || bottom) && scroll <= stickpoints.top - topMargin) {\n                void 0;\n                unStick();\n            }\n            //RESPONSIVE baby ;-)\n\t\t\tif(active || hold || bottom)\n\t\t\t\tsyncWidth();\n            \n            //Special cases which need a specified position like margin:0 centered elements\n            if(options.syncPosition && active || hold)\n\t\t\t\tsyncPosition();\n            //console.log(\"active \",active,\"hold \",hold,\"bottom \",bottom);\n        },\n        stickUpResponsiveHandlerFn = function(event){\n            if(hold){\n                holdIt();\n                bottom = false;\n            }\n            void 0;\n                stickUpScrollHandlerFn(event);\n\n        };\n\n        //init\n        var initialize = function(elem,opts){\n            $element = $(elem);\n            // adding a class to users div\n            $element.addClass(options.namespaceClass);\n            //getting options\n            if (opts) {\n                $.extend(true, options, opts);\n            } \n            topMargin = (options.topMargin !== null) ? getTopMargin() : 0;\n            if(options.lazyHeight)\n                topMargin = topMargin + options.lazyHeight;\n            if(options.keepInWrapper){\n                if(options.wrapperSelector !== '')\n                    $parent = $element.closest(options.wrapperSelector);\n                //if no Wrapper available use offsetParent\n                if(!$parent.length)\n                    $parent = $element.parent();\n            }else{\n                $parent = $('body');\n            }\n            if(options.zIndex)\n                $element.css('z-index',options.zIndex);\n            \n            if(syncPosition){\n                syncMargins();\n            }\n            \n            $(window).on('scroll.stickUp', stickUpScrollHandlerFn);\n            $(window).on('resize.stickUp', stickUpResponsiveHandlerFn);\n            //initial round ;-)\n            stickUpScrollHandlerFn({target: document});\n        };\n        initialize.call(this, elem, opts);\n    };\n\n    $.fn.stickUp = function( options ) {\n        return this.each(function() {\n          new StickUp( this, options );\n        });\n    };\n}(jQuery, window, document));\n"],"sourceRoot":"assets/scripts/"}